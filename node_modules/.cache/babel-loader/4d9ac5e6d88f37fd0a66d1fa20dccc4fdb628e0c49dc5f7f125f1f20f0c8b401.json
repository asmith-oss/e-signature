{"ast":null,"code":"import{Deferred}from'@firebase/util';/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */class Component{/**\n     *\n     * @param name The public service name, e.g. app, auth, firestore, database\n     * @param instanceFactory Service factory responsible for creating the public interface\n     * @param type whether the service provided by the component is public or private\n     */constructor(name,instanceFactory,type){this.name=name;this.instanceFactory=instanceFactory;this.type=type;this.multipleInstances=false;/**\n         * Properties to be added to the service namespace\n         */this.serviceProps={};this.instantiationMode=\"LAZY\"/* InstantiationMode.LAZY */;this.onInstanceCreated=null;}setInstantiationMode(mode){this.instantiationMode=mode;return this;}setMultipleInstances(multipleInstances){this.multipleInstances=multipleInstances;return this;}setServiceProps(props){this.serviceProps=props;return this;}setInstanceCreatedCallback(callback){this.onInstanceCreated=callback;return this;}}/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */const DEFAULT_ENTRY_NAME='[DEFAULT]';/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *//**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */class Provider{constructor(name,container){this.name=name;this.container=container;this.component=null;this.instances=new Map();this.instancesDeferred=new Map();this.instancesOptions=new Map();this.onInitCallbacks=new Map();}/**\n     * @param identifier A provider can provide multiple instances of a service\n     * if this.component.multipleInstances is true.\n     */get(identifier){// if multipleInstances is not supported, use the default name\nconst normalizedIdentifier=this.normalizeInstanceIdentifier(identifier);if(!this.instancesDeferred.has(normalizedIdentifier)){const deferred=new Deferred();this.instancesDeferred.set(normalizedIdentifier,deferred);if(this.isInitialized(normalizedIdentifier)||this.shouldAutoInitialize()){// initialize the service if it can be auto-initialized\ntry{const instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});if(instance){deferred.resolve(instance);}}catch(e){// when the instance factory throws an exception during get(), it should not cause\n// a fatal error. We just return the unresolved promise in this case.\n}}}return this.instancesDeferred.get(normalizedIdentifier).promise;}getImmediate(options){var _a;// if multipleInstances is not supported, use the default name\nconst normalizedIdentifier=this.normalizeInstanceIdentifier(options===null||options===void 0?void 0:options.identifier);const optional=(_a=options===null||options===void 0?void 0:options.optional)!==null&&_a!==void 0?_a:false;if(this.isInitialized(normalizedIdentifier)||this.shouldAutoInitialize()){try{return this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});}catch(e){if(optional){return null;}else{throw e;}}}else{// In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\nif(optional){return null;}else{throw Error(\"Service \".concat(this.name,\" is not available\"));}}}getComponent(){return this.component;}setComponent(component){if(component.name!==this.name){throw Error(\"Mismatching Component \".concat(component.name,\" for Provider \").concat(this.name,\".\"));}if(this.component){throw Error(\"Component for \".concat(this.name,\" has already been provided\"));}this.component=component;// return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\nif(!this.shouldAutoInitialize()){return;}// if the service is eager, initialize the default instance\nif(isComponentEager(component)){try{this.getOrInitializeService({instanceIdentifier:DEFAULT_ENTRY_NAME});}catch(e){// when the instance factory for an eager Component throws an exception during the eager\n// initialization, it should not cause a fatal error.\n// TODO: Investigate if we need to make it configurable, because some component may want to cause\n// a fatal error in this case?\n}}// Create service instances for the pending promises and resolve them\n// NOTE: if this.multipleInstances is false, only the default instance will be created\n// and all promises with resolve with it regardless of the identifier.\nfor(const[instanceIdentifier,instanceDeferred]of this.instancesDeferred.entries()){const normalizedIdentifier=this.normalizeInstanceIdentifier(instanceIdentifier);try{// `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\nconst instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});instanceDeferred.resolve(instance);}catch(e){// when the instance factory throws an exception, it should not cause\n// a fatal error. We just leave the promise unresolved.\n}}}clearInstance(){let identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;this.instancesDeferred.delete(identifier);this.instancesOptions.delete(identifier);this.instances.delete(identifier);}// app.delete() will call this method on every provider to delete the services\n// TODO: should we mark the provider as deleted?\nasync delete(){const services=Array.from(this.instances.values());await Promise.all([...services.filter(service=>'INTERNAL'in service)// legacy services\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.map(service=>service.INTERNAL.delete()),...services.filter(service=>'_delete'in service)// modularized services\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.map(service=>service._delete())]);}isComponentSet(){return this.component!=null;}isInitialized(){let identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;return this.instances.has(identifier);}getOptions(){let identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;return this.instancesOptions.get(identifier)||{};}initialize(){let opts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{options={}}=opts;const normalizedIdentifier=this.normalizeInstanceIdentifier(opts.instanceIdentifier);if(this.isInitialized(normalizedIdentifier)){throw Error(\"\".concat(this.name,\"(\").concat(normalizedIdentifier,\") has already been initialized\"));}if(!this.isComponentSet()){throw Error(\"Component \".concat(this.name,\" has not been registered yet\"));}const instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier,options});// resolve any pending promise waiting for the service instance\nfor(const[instanceIdentifier,instanceDeferred]of this.instancesDeferred.entries()){const normalizedDeferredIdentifier=this.normalizeInstanceIdentifier(instanceIdentifier);if(normalizedIdentifier===normalizedDeferredIdentifier){instanceDeferred.resolve(instance);}}return instance;}/**\n     *\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n     *\n     * @param identifier An optional instance identifier\n     * @returns a function to unregister the callback\n     */onInit(callback,identifier){var _a;const normalizedIdentifier=this.normalizeInstanceIdentifier(identifier);const existingCallbacks=(_a=this.onInitCallbacks.get(normalizedIdentifier))!==null&&_a!==void 0?_a:new Set();existingCallbacks.add(callback);this.onInitCallbacks.set(normalizedIdentifier,existingCallbacks);const existingInstance=this.instances.get(normalizedIdentifier);if(existingInstance){callback(existingInstance,normalizedIdentifier);}return()=>{existingCallbacks.delete(callback);};}/**\n     * Invoke onInit callbacks synchronously\n     * @param instance the service instance`\n     */invokeOnInitCallbacks(instance,identifier){const callbacks=this.onInitCallbacks.get(identifier);if(!callbacks){return;}for(const callback of callbacks){try{callback(instance,identifier);}catch(_a){// ignore errors in the onInit callback\n}}}getOrInitializeService(_ref){let{instanceIdentifier,options={}}=_ref;let instance=this.instances.get(instanceIdentifier);if(!instance&&this.component){instance=this.component.instanceFactory(this.container,{instanceIdentifier:normalizeIdentifierForFactory(instanceIdentifier),options});this.instances.set(instanceIdentifier,instance);this.instancesOptions.set(instanceIdentifier,options);/**\n             * Invoke onInit listeners.\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\n             * while onInit listeners are registered by consumers of the provider.\n             */this.invokeOnInitCallbacks(instance,instanceIdentifier);/**\n             * Order is important\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n             * makes `isInitialized()` return true.\n             */if(this.component.onInstanceCreated){try{this.component.onInstanceCreated(this.container,instanceIdentifier,instance);}catch(_a){// ignore errors in the onInstanceCreatedCallback\n}}}return instance||null;}normalizeInstanceIdentifier(){let identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;if(this.component){return this.component.multipleInstances?identifier:DEFAULT_ENTRY_NAME;}else{return identifier;// assume multiple instances are supported before the component is provided.\n}}shouldAutoInitialize(){return!!this.component&&this.component.instantiationMode!==\"EXPLICIT\"/* InstantiationMode.EXPLICIT */;}}// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier){return identifier===DEFAULT_ENTRY_NAME?undefined:identifier;}function isComponentEager(component){return component.instantiationMode===\"EAGER\"/* InstantiationMode.EAGER */;}/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *//**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */class ComponentContainer{constructor(name){this.name=name;this.providers=new Map();}/**\n     *\n     * @param component Component being added\n     * @param overwrite When a component with the same name has already been registered,\n     * if overwrite is true: overwrite the existing component with the new component and create a new\n     * provider with the new component. It can be useful in tests where you want to use different mocks\n     * for different tests.\n     * if overwrite is false: throw an exception\n     */addComponent(component){const provider=this.getProvider(component.name);if(provider.isComponentSet()){throw new Error(\"Component \".concat(component.name,\" has already been registered with \").concat(this.name));}provider.setComponent(component);}addOrOverwriteComponent(component){const provider=this.getProvider(component.name);if(provider.isComponentSet()){// delete the existing provider from the container, so we can register the new component\nthis.providers.delete(component.name);}this.addComponent(component);}/**\n     * getProvider provides a type safe interface where it can only be called with a field name\n     * present in NameServiceMapping interface.\n     *\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\n     * themselves.\n     */getProvider(name){if(this.providers.has(name)){return this.providers.get(name);}// create a Provider for a service that hasn't registered with Firebase\nconst provider=new Provider(name,this);this.providers.set(name,provider);return provider;}getProviders(){return Array.from(this.providers.values());}}export{Component,ComponentContainer,Provider};","map":{"version":3,"names":["Component","constructor","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","Error","concat","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","arguments","length","undefined","delete","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","_ref","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"],"sources":["C:\\Users\\aaron\\frontend\\my-react-app\\src\\node_modules\\@firebase\\component\\src\\component.ts","C:\\Users\\aaron\\frontend\\my-react-app\\src\\node_modules\\@firebase\\component\\src\\constants.ts","C:\\Users\\aaron\\frontend\\my-react-app\\src\\node_modules\\@firebase\\component\\src\\provider.ts","C:\\Users\\aaron\\frontend\\my-react-app\\src\\node_modules\\@firebase\\component\\src\\component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}