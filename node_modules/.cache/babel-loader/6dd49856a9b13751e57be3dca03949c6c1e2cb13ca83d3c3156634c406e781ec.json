{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *//**\n * A container for all of the Logger instances\n */const instances=[];/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */var LogLevel;(function(LogLevel){LogLevel[LogLevel[\"DEBUG\"]=0]=\"DEBUG\";LogLevel[LogLevel[\"VERBOSE\"]=1]=\"VERBOSE\";LogLevel[LogLevel[\"INFO\"]=2]=\"INFO\";LogLevel[LogLevel[\"WARN\"]=3]=\"WARN\";LogLevel[LogLevel[\"ERROR\"]=4]=\"ERROR\";LogLevel[LogLevel[\"SILENT\"]=5]=\"SILENT\";})(LogLevel||(LogLevel={}));const levelStringToEnum={'debug':LogLevel.DEBUG,'verbose':LogLevel.VERBOSE,'info':LogLevel.INFO,'warn':LogLevel.WARN,'error':LogLevel.ERROR,'silent':LogLevel.SILENT};/**\n * The default log level\n */const defaultLogLevel=LogLevel.INFO;/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */const ConsoleMethod={[LogLevel.DEBUG]:'log',[LogLevel.VERBOSE]:'log',[LogLevel.INFO]:'info',[LogLevel.WARN]:'warn',[LogLevel.ERROR]:'error'};/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */const defaultLogHandler=function(instance,logType){if(logType<instance.logLevel){return;}const now=new Date().toISOString();const method=ConsoleMethod[logType];if(method){for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}console[method](\"[\".concat(now,\"]  \").concat(instance.name,\":\"),...args);}else{throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType,\")\"));}};class Logger{/**\n     * Gives you an instance of a Logger to capture messages according to\n     * Firebase's logging scheme.\n     *\n     * @param name The name that the logs will be associated with\n     */constructor(name){this.name=name;/**\n         * The log level of the given Logger instance.\n         */this._logLevel=defaultLogLevel;/**\n         * The main (internal) log handler for the Logger instance.\n         * Can be set to a new function in internal package code but not by user.\n         */this._logHandler=defaultLogHandler;/**\n         * The optional, additional, user-defined log handler for the Logger instance.\n         */this._userLogHandler=null;/**\n         * Capture the current instance for later use\n         */instances.push(this);}get logLevel(){return this._logLevel;}set logLevel(val){if(!(val in LogLevel)){throw new TypeError(\"Invalid value \\\"\".concat(val,\"\\\" assigned to `logLevel`\"));}this._logLevel=val;}// Workaround for setter/getter having to be the same type.\nsetLogLevel(val){this._logLevel=typeof val==='string'?levelStringToEnum[val]:val;}get logHandler(){return this._logHandler;}set logHandler(val){if(typeof val!=='function'){throw new TypeError('Value assigned to `logHandler` must be a function');}this._logHandler=val;}get userLogHandler(){return this._userLogHandler;}set userLogHandler(val){this._userLogHandler=val;}/**\n     * The functions below are all based on the `console` interface\n     */debug(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}this._userLogHandler&&this._userLogHandler(this,LogLevel.DEBUG,...args);this._logHandler(this,LogLevel.DEBUG,...args);}log(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}this._userLogHandler&&this._userLogHandler(this,LogLevel.VERBOSE,...args);this._logHandler(this,LogLevel.VERBOSE,...args);}info(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}this._userLogHandler&&this._userLogHandler(this,LogLevel.INFO,...args);this._logHandler(this,LogLevel.INFO,...args);}warn(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}this._userLogHandler&&this._userLogHandler(this,LogLevel.WARN,...args);this._logHandler(this,LogLevel.WARN,...args);}error(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}this._userLogHandler&&this._userLogHandler(this,LogLevel.ERROR,...args);this._logHandler(this,LogLevel.ERROR,...args);}}function setLogLevel(level){instances.forEach(inst=>{inst.setLogLevel(level);});}function setUserLogHandler(logCallback,options){for(const instance of instances){let customLogLevel=null;if(options&&options.level){customLogLevel=levelStringToEnum[options.level];}if(logCallback===null){instance.userLogHandler=null;}else{instance.userLogHandler=function(instance,level){for(var _len7=arguments.length,args=new Array(_len7>2?_len7-2:0),_key7=2;_key7<_len7;_key7++){args[_key7-2]=arguments[_key7];}const message=args.map(arg=>{if(arg==null){return null;}else if(typeof arg==='string'){return arg;}else if(typeof arg==='number'||typeof arg==='boolean'){return arg.toString();}else if(arg instanceof Error){return arg.message;}else{try{return JSON.stringify(arg);}catch(ignored){return null;}}}).filter(arg=>arg).join(' ');if(level>=(customLogLevel!==null&&customLogLevel!==void 0?customLogLevel:instance.logLevel)){logCallback({level:LogLevel[level].toLowerCase(),message,args,type:instance.name});}};}}}export{LogLevel,Logger,setLogLevel,setUserLogHandler};","map":{"version":3,"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","_len","arguments","length","args","Array","_key","console","concat","name","Error","Logger","constructor","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","_len2","_key2","log","_len3","_key3","info","_len4","_key4","warn","_len5","_key5","error","_len6","_key6","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","_len7","_key7","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type"],"sources":["C:\\Users\\aaron\\frontend\\my-react-app\\src\\node_modules\\@firebase\\logger\\src\\logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}